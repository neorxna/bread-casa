{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Slice","props","sliceRef","useRef","Math","PI","react_default","a","createElement","dist","translate","z","ref","x","path","y","bezier","line","stroke","fill","closed","color","Loaf","loafRef","useRender","t","current","rotate","min","max","slices","console","log","random","map","n","ryebrown","Color","darken","last","length","App","className","zoom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAKA,SAASA,EAAMC,GACb,IAAMC,EAAWC,mBACLC,KAAKC,GAUjB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAW,CACTC,EAAGV,EAAMU,IAGXL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEG,IAAKV,EACLQ,UAAW,CAAEC,GAAI,IAAKE,GAAI,IAC1BC,KAAM,CACJ,CAAED,EAAG,EAAGE,EAAG,GACX,CACEC,OAAQ,CACN,CAAEH,GAAI,GAAIE,EAAG,GACb,CAAEF,EAAG,EAAGE,GAAI,IACZ,CAAEF,EAAG,GAAIE,GAAI,MAGjB,CACEC,OAAQ,CACN,CAAEH,EAAG,GAAIE,GAAI,IACb,CAAEF,EAAG,IAAKE,EAAG,GACb,CAAEF,EAAG,GAAIE,EAAG,KAGhB,CACEE,KAAM,CACJ,CAAEJ,EAAG,GAAIE,EAAG,MAGhB,CAAEE,KAAM,CAAC,CAAEJ,EAAG,EAAGE,EAAG,MACpB,CAAEE,KAAM,CAAC,CAAEJ,EAAG,EAAGE,EAAG,MAEtBG,OAAQ,GACRC,MAAI,EACJC,QAAQ,EACRC,MAAOpB,EAAMoB,SAMrB,SAASC,IACP,IAAMC,EAAUpB,mBAGhBqB,YAAU,SAAAC,GACRF,EAAQG,QAAQC,OAAOZ,GAAK,KAE5BQ,EAAQG,QAAQC,OAAOhB,GAAK,OAG9B,IARciB,EAAKC,EAQbC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAElE,OADAC,QAAQC,KATMJ,EASG,EATEC,EASC,EATOzB,KAAK6B,UAAYJ,EAAMD,GAAOA,IAWvDtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQG,IAAKW,GACVO,EAAOI,IAAI,SAAAC,GACV,IAAIC,EAAW,IAAIC,EAAM,WACzB,OACE/B,EAAAC,EAAAC,cAACR,EAAD,CACEW,EAAO,GAAJwB,EACHd,MAAOe,EAASE,OAAOlC,KAAKwB,IAAM,GAAGO,EAAE,KAAQ,GAAK,KACpDI,KAAMJ,IAAML,EAAOU,OAAS,OAkBzBC,MAVf,WACE,OACEnC,EAAAC,EAAAC,cAAA,QAAMkC,UAAU,QACdpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAckC,KAAM,GAClBrC,EAAAC,EAAAC,cAACc,EAAD,SC/EYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2942b60c.chunk.js","sourcesContent":["import React, { useRef } from 'react'\nimport { Illustration, Shape, Ellipse, useRender, Anchor } from 'react-zdog'\nimport './App.css'\nimport * as Color from 'color2'\n\nfunction Slice(props) {\n  const sliceRef = useRef()\n  const TAU = Math.PI * 2\n  let rotate = 0\n\n  /*useRender(t => {\n    if (props.last && rotate > -TAU / 4) {\n      rotate -= 0.01\n      sliceRef.current.rotate.x = rotate\n    }\n  })\n*/\n  return (\n    <Anchor\n      translate={{\n        z: props.z\n      }}\n    >\n      <Shape\n        ref={sliceRef}\n        translate={{ z: -120, x: -40 }}\n        path={[\n          { x: 0, y: 0 }, // start\n          {\n            bezier: [\n              { x: -40, y: 0 }, // start control point\n              { x: 0, y: -60 }, // end control point\n              { x: 45, y: -60 } // end point\n            ]\n          },\n          {\n            bezier: [\n              { x: 90, y: -60 }, // start control point\n              { x: 120, y: 0 }, // end control point\n              { x: 90, y: 0 } // end point\n            ]\n          },\n          {\n            line: [\n              { x: 90, y: 70 }\n            ]\n          },\n          { line: [{ x: 0, y: 70 }] },\n          { line: [{ x: 0, y: 0 }] }\n        ]}\n        stroke={20}\n        fill\n        closed={false}\n        color={props.color}\n      />\n    </Anchor>\n  )\n}\n\nfunction Loaf() {\n  const loafRef = useRef()\n  const rand = (min, max) => Math.random() * (max - min) + min\n\n  useRender(t => {\n    loafRef.current.rotate.y += 0.005\n\n    loafRef.current.rotate.z -= 0.005\n  })\n\n  const slices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  console.log(rand(0, 1))\n  return (\n    <Anchor ref={loafRef}>\n      {slices.map(n => {\n        let ryebrown = new Color('#ae7646')\n        return (\n          <Slice\n            z={n * 20}\n            color={ryebrown.darken(Math.min(((1/(n/1.2))) -0.1, 0.4))}\n            last={n === slices.length - 1}\n          />\n        )\n      })}\n    </Anchor>\n  )\n}\n\nfunction App() {\n  return (\n    <main className='loaf'>\n      <Illustration zoom={2}>\n        <Loaf />\n      </Illustration>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}